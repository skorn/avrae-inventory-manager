embed
<drac2>

# Load settings and set defaults
settings=load_json(get_svar("inventorySettings", {}))
settings["additionalGVARs"] = settings["additionalGVARs"] if "additionalGVARs" in settings else []
settings["disablePurge"] = settings["disablePurge"] if "disablePurge" in settings else "false"
settings["itemInfoGVAR"] = settings["itemInfoGVAR"] if "itemInfoGVAR" in settings else "66f684d2-42d5-4b0e-8231-c0d6c52b672d"
settings["useEP"] = settings["useEP"] if "useEP" in settings else "false"
settings["usePP"] = settings["usePP"] if "usePP" in settings else "false"

#Load item info, in escalating priority
itemInfo=load_json(get_gvar(settings["itemInfoGVAR"]))
for itemGVAR in settings["additionalGVARs"]:
    tmpInfo=load_json(get_gvar(itemGVAR))
    for item in tmpInfo:
        itemInfo[item] = tmpInfo[item]

# Set some variables to be used in embed output
TITLE=""
DESC=""
ERROR=""
INITIALHEADER=""
INITIALBODY=""

# Parse which command was issued
validCommands = [
    "add",
    "buy",
    "exchangecurrency",
    "export",
    "help",
    "import",
    "list",
    "move",
    "purge",
    "remove",
    "shop",
    "search"
]
argArray=&ARGS&
currencies=["pp", "gp", "ep", "sp", "cp"]
command="help" # Default to help if things don't parse properly.
bag="" # Which container to change/show
newbag="" # Which container to change/show
timeout=" -t 10 " # By default respond in channel
count=1
customCost = -1.0
customWeight = -1.0

# Strip some arguments
if "-bag" in argArray:
    index=argArray.index("-bag")
    argArray.pop(index)
    bag=argArray.pop(index).capitalize()
if "-newbag" in argArray:
    index=argArray.index("-newbag")
    argArray.pop(index)
    newbag=argArray.pop(index).capitalize()
if "-keep" in argArray:
    timeout=""
    argArray.pop(argArray.index("-keep"))
if "-count" in argArray:
    index=argArray.index("-count")
    argArray.pop(index)
    count=argArray.pop(index)
if "-cost" in argArray:
    index=argArray.index("-cost")
    argArray.pop(index)
    customCost=argArray.pop(index)
if "-weight" in argArray:
    index=argArray.index("-weight")
    argArray.pop(index)
    customWeight=argArray.pop(index)

if len(argArray) < 1: # If there are no arguments default to list inventory
    command = "list"
elif sum(c.startswith(argArray[0].lower()) for c in validCommands) == 1: # If the provided command matches a unique
    command = [c for c in validCommands if c.startswith(argArray[0])][0] # beginning use it ("ie: exch for exchangecurrency")
    argArray.pop(0)
elif argArray[0].startswith("?"): # "?" as shorthand for "help"
    command = "help"
elif argArray[0].startswith("+"): # "+20 xxx" as shorthand for "add 20 xxx"
    command = "add"
    argArray[0] = argArray[0].replace("+","")
elif argArray[0].startswith("-"): # "-20 xxx" as shorthand for remove 20 xxx"
    command = "remove"
    argArray[0] = argArray[0].replace("-","")
else: # If provided command doesn't parse to a valid one, provide that as error and print out help.
    ERROR += "Invalid command given (" + argArray[0] + "). Valid commands: " + ", ".join(validCommands) + "\n"
    command = "help"


# Get current inventory (or initialize it)
character().set_cvar_nx("inventory", '{"Wallet": {}, "Carried": {}}') # Set the cvar if not set to anything already.
if inventory.startswith("{"):
    inv=load_json(inventory)
else:
    inv = {"Wallet": {}, "Carried": {}}
    if inventory != "":
        combined = inventory.split("||") # Each item is separated by "||"
        for eachCombined in combined:
            if ": " in eachCombined: # Item formatted as "Item Name: (quantity in inv)|(gp value)|(weight)"
                split = eachCombined.split(": ")
                props = split[1].split("|")
                if split[0].lower() in currencies and float(props[0]) >= 1.0:
                    inv["Wallet"][split[0].upper()] = {"Count": props[0], "Cost": props[1], "Weight": props[2]}
                elif float(props[0]) >= 1.0:
                    inv["Carried"][split[0]] = {"Count": props[0], "Cost": props[1], "Weight": props[2]}
    character().set_cvar("inventory", dump_json(inv))


# Add and Remove grouped as they are almost identical.
if command == "add" or command == "remove":
    if argArray[0].isdigit():
        count = float(argArray.pop(0))
    item = " ".join(argArray)
    for eachBag in inv:
        bag = eachBag if eachBag.lower() == bag.lower() else bag
    useBag = "Wallet" if item in currencies else bag.capitalize() if bag != "" else "Carried"
    if useBag not in inv:
        inv[useBag] = {}
    itemLower = item.lower()
    PluralForm = item + "s"
    for definedItem in [k for k in itemInfo]: # Check for pluralized item names
        tmpPluralForm = PluralForm
        if "PluralForm" in itemInfo[definedItem]:            # If PluralForm defined in item info use that.
            tmpPluralForm = itemInfo[definedItem].PluralForm # IE: Staff -> Staves
        else:
            tmpPluralForm = f"{definedItem}s"
        if item.lower() == tmpPluralForm.lower() or item.lower() == tmpPluralForm.lower():
            item = definedItem
            PluralForm = tmpPluralForm
            break
    if sum(i.lower().startswith(item.lower()) for i in itemInfo.keys()) == 1: # If the provided command matches a unique
        item = [i for i in itemInfo.keys() if i.lower().startswith(item.lower())][0] # beginning use it ("ie: exch for exchangecurrency")
    itemCost = -1.0                # Lookup 
    itemWeight = 0.0
    if item in itemInfo:
        if "Cost" in itemInfo[item]:
            itemCost = itemInfo[item].Cost
        if "Weight" in itemInfo[item]:
            itemWeight = itemInfo[item].Weight
    if customCost >= 0:
        itemCost = customCost
    if customWeight >= 0:
        itemWeight = customWeight
    if command == "add":
        inv[useBag][item] = {"Count": (float(inv[useBag][item]["Count"]) if item in inv[useBag] else 0.0) + float(count), "Cost": itemCost, "Weight": itemWeight}
        DESC = f"Added {int(float(count))} {PluralForm if count > 1 else item}. New total: {int(float(inv[useBag][item]['Count']))}\n"
    else: # command == "remove"
        if item in inv[useBag]:
            if count >= float(inv[useBag][item]["Count"]):
                DESC = "Removed " + str(int(inv[useBag][item]["Count"])) + " " + (PluralForm if int(inv[useBag][item]["Count"]) > 1 else item) + ". New total: 0" + (" (can't go negative, tried to set to " + (str(int(float(inv[useBag][item]["Count"]) - count))) if float(count) > float(inv[useBag][item]["Count"]) else "") + ")\n"
                inv[useBag].pop(item)
                if len(inv[useBag]) < 1 and useBag != "Wallet":
                     inv.pop(useBag)
            else:
                inv[useBag][item]["Count"] = float(inv[useBag][item]["Count"]) - float(count)
                DESC = "Removed " + str(count) + " " + (PluralForm if count > 1 else item) + ". New total: " + str(inv[useBag][item]["Count"]) + "\n"
        else:
            ERROR += f"Tried to remove {item}, but it was not found in {useBag}.\n"
    character().set_cvar("inventory", dump_json(inv))
    command = "list"


if command == "buy":
    if argArray[0].isdigit():
        count = float(argArray.pop(0))
    item = " ".join(argArray)
    itemLower = item.lower()
    for eachBag in inv:
        bag = eachBag if eachBag.lower() == bag.lower() else bag
    useBag = bag.capitalize() if bag != "" else "Carried"
    if useBag not in inv:
        inv[useBag] = {}
    for definedItem in [k for k in itemInfo] + [k for k in inv[useBag]]:
        tmpPluralForm = definedItem + "s"
        if definedItem in itemInfo:
            if "PluralForm" in itemInfo[definedItem]:
                tmpPluralForm = itemInfo[definedItem].PluralForm
        if itemLower == tmpPluralForm.lower():
            item = definedItem
            break
        elif itemLower == definedItem.lower():
            item = definedItem
            break
    itemCost = -1.0
    itemWeight = -1.0
    PluralForm = item + "s"
    if item in itemInfo:
        if "Cost" in itemInfo[item]:
            itemCost = customCost if customCost >= 0 else itemInfo[item]["Cost"]
        if "Weight" in itemInfo[item]:
            itemWeight = customWeight if customWeight >= 0 else itemInfo[item]["Weight"]
        if "PluralForm" in itemInfo[item]:
            PluralForm = itemInfo[item].PluralForm
    if int(itemCost) < 0:
        INITIALHEADER = "ITEM HAS NO COST"
        INITIALBODY = "This item has no cost, perhaps it cannot be bought normally?"
    else:
        if item in inv[useBag]:
            inv[useBag][item]["Count"] = float(inv[useBag][item]["Count"]) + float(count)
        else:
            inv[useBag][item] = {"Count": count, "Cost": itemCost, "Weight": itemWeight}
        DESC = f"Bought {str(count)} {PluralForm if count > 1 else item}.\nNew total: {str(inv[useBag][item]['Count'])}"

        totalCost = 0
        totalCost = float(float(itemCost) * 100.0 * count)

        # Spend CP first
        tmpCost = totalCost
        cpCost = tmpCost % 10
        if cpCost != 0:
            tmpCost = tmpCost - cpCost
            if "CP" in inv["Wallet"]:
                if float(inv["Wallet"]["CP"]["Count"]) < cpCost:
                    inv["Wallet"]["CP"]["Count"] = float(inv["Wallet"]["CP"]["Count"]) + 10 - cpCost
                    tmpCost = tmpCost + 10
                else:
                    inv["Wallet"]["CP"]["Count"] = float(inv["Wallet"]["CP"]["Count"]) - cpCost
            else:
                inv["Wallet"]["CP"] = {"Count": 10 - cpCost, "Cost": 0.01, "Weight": 0.02}
                tmpCost = tmpCost + 10
        if "CP" in inv["Wallet"]:
            while float(inv["Wallet"]["CP"]["Count"]) > 9 and tmpCost > 9:
                inv["Wallet"]["CP"]["Count"] = float(inv["Wallet"]["CP"]["Count"]) - 10
                tmpCost = tmpCost - 10

        # Spend SP next
        tmpCost = tmpCost / 10
        spCost = tmpCost % 10
        if spCost != 0:
            tmpCost = tmpCost - spCost
            if "SP" in inv["Wallet"]:
                if float(inv["Wallet"]["SP"]["Count"]) < spCost:
                    inv["Wallet"]["SP"]["Count"] = float(inv["Wallet"]["SP"]["Count"]) + 10 - spCost
                    tmpCost = tmpCost + 10
                else:
                    inv["Wallet"]["SP"]["Count"] = float(inv["Wallet"]["SP"]["Count"]) - spCost
            else:
                inv["Wallet"]["SP"] = {"Count": 10 - spCost, "Cost": 0.1, "Weight": 0.02}
                tmpCost = tmpCost + 10
        if "SP" in inv["Wallet"]:
            while float(inv["Wallet"]["SP"]["Count"]) > 9 and tmpCost > 9:
                inv["Wallet"]["SP"]["Count"] = float(inv["Wallet"]["SP"]["Count"]) - 10
                tmpCost = tmpCost - 10

        # Spend EP next if used
        if "useEP" in settings and settings.useEP == "true":
            epCost = tmpCost / 5 % 2
            if epCost != 0:
                tmpCost = tmpCost - 5
                if "EP" in inv["Wallet"]:
                    if float(inv["Wallet"]["EP"]["Count"]) == 0:
                        inv["Wallet"]["EP"]["Count"] = float(inv["Wallet"]["EP"]["Count"]) + 1
                        tmpCost = tmpCost + 10
                    else:
                        inv["Wallet"]["EP"]["Count"] = float(inv["Wallet"]["EP"]["Count"]) - epCost
                else:
                    inv["Wallet"]["EP"] = {"Count": 1, "Cost": 0.5, "Weight": 0.02}
                    tmpCost = tmpCost + 10
            if "EP" in inv["Wallet"]:
                while float(inv["Wallet"]["EP"]["Count"]) > 1 and tmpCost > 4:
                    inv["Wallet"]["EP"]["Count"] = float(inv["Wallet"]["EP"]["Count"]) - 1
                    tmpCost = tmpCost - 5

        # Spend GP next
        tmpCost = tmpCost / 10
        gpCost = tmpCost % 10
        if gpCost != 0:
            tmpCost = tmpCost - gpCost
            if "GP" in inv["Wallet"]:
                if float(inv["Wallet"]["GP"]["Count"]) < gpCost:
                    inv["Wallet"]["GP"]["Count"] = float(inv["Wallet"]["GP"]["Count"]) + 10 - gpCost
                    tmpCost = tmpCost + 10
                else:
                    inv["Wallet"]["GP"]["Count"] = float(inv["Wallet"]["GP"]["Count"]) - gpCost
            else:
                inv["Wallet"]["GP"] = {"Count": 10 - gpCost, "Cost": 1.0, "Weight": 0.02}
                tmpCost = tmpCost + 10
        if "GP" in inv["Wallet"]:
            while float(inv["Wallet"]["GP"]["Count"]) > 9 and tmpCost > 9:
                inv["Wallet"]["GP"]["Count"] = float(inv["Wallet"]["GP"]["Count"]) - 10
                tmpCost = tmpCost - 10

        command = "list"

        # Spend PP next
        if "usePP" in settings and settings.usePP == "true":
            tmpCost = tmpCost / 10
            ppCost = tmpCost % 10
            if ppCost != 0:
                tmpCost = tmpCost - ppCost
                if "PP" in inv["Wallet"]:
                    if float(inv["Wallet"]["PP"]["Count"]) < ppCost:
                        inv["Wallet"]["PP"]["Count"] = float(inv["Wallet"]["PP"]["Count"]) + 10 - ppCost
                        tmpCost = tmpCost + 10
                    else:
                        inv["Wallet"]["PP"]["Count"] = float(inv["Wallet"]["PP"]["Count"]) - ppCost
                else:
                    inv["Wallet"]["PP"] = {"Count": 10 - ppCost, "Cost": 10.0, "Weight": 0.02}
                    tmpCost = tmpCost + 10
            if "PP" in inv["Wallet"]:
                while float(inv["Wallet"]["PP"]["Count"]) > 9 and tmpCost > 9:
                    inv["Wallet"]["PP"]["Count"] = float(inv["Wallet"]["PP"]["Count"]) - 10
                    tmpCost = tmpCost - 10
        if tmpCost > 0:
            DESC = "Insufficient Funds. You cannot afford " + item + "\n"
            inv=load_json(inventory)
        if "Wallet" in inv and "CP" in inv["Wallet"] and inv["Wallet"]["CP"] == 0:
            inv["Wallet"].pop("CP")
        if "Wallet" in inv and "SP" in inv["Wallet"] and inv["Wallet"]["SP"] == 0:
            inv["Wallet"].pop("SP")
        if "Wallet" in inv and "EP" in inv["Wallet"] and inv["Wallet"]["EP"] == 0:
            inv["Wallet"].pop("EP")
        if "Wallet" in inv and "GP" in inv["Wallet"] and inv["Wallet"]["GP"] == 0:
            inv["Wallet"].pop("GP")
        if "Wallet" in inv and "PP" in inv["Wallet"] and inv["Wallet"]["PP"] == 0:
            inv["Wallet"].pop("PP")

        character().set_cvar("inventory", dump_json(inv))
        command = "list"


if command == "exchangecurrency":
    totalCPValue = 0
    mod = 0
    if "CP" in inv["Wallet"]:
        totalCPValue = float(inv["Wallet"]["CP"]["Count"])
        inv["Wallet"].pop("CP")
    if "SP" in inv["Wallet"]:
        totalCPValue = totalCPValue + (float(inv["Wallet"]["SP"]["Count"]) * 10)
        inv["Wallet"].pop("SP")
    if "useEP" in settings and settings["useEP"].lower() == "true":
        if "EP" in inv["Wallet"]:
            totalCPValue = totalCPValue + (float(inv["Wallet"]["EP"]["Count"]) * 50)
            inv["Wallet"].pop("EP")
    if "GP" in inv["Wallet"]:
        totalCPValue = totalCPValue + (float(inv["Wallet"]["GP"]["Count"]) * 100)
        inv["Wallet"].pop("GP")
    if "usePP" in settings and settings["usePP"].lower() == "true":
        if "PP" in inv["Wallet"]:
            totalCPValue = totalCPValue + (float(inv["Wallet"]["PP"]["Count"]) * 1000)
            inv["Wallet"].pop("PP")
    if "usePP" in settings and settings["usePP"].lower() == "true":
        mod = totalCPValue % 1000
        totalPPCount = ( totalCPValue - mod ) / 1000
        totalCPValue = totalCPValue - (totalPPCount * 1000)
    mod = totalCPValue % 100
    totalGPCount = ( totalCPValue - mod ) / 100
    totalCPValue = totalCPValue - (totalGPCount * 100)
    if "useEP" in settings and settings["useEP"].lower() == "true":
        mod = totalCPValue % 50
        totalEPCount = ( totalCPValue - mod ) / 50
        totalCPValue = totalCPValue - (totalEPCount * 50)
    mod = totalCPValue % 10
    totalSPCount = ( totalCPValue - mod ) / 10
    totalCPValue = totalCPValue - (totalSPCount * 10)
    if totalCPValue > 0:
        inv["Wallet"]["CP"] = {"Count": totalCPValue, "Cost": 0.01, "Weight": 0.02}
    if totalSPCount > 0:
        inv["Wallet"]["SP"] = {"Count": totalSPCount, "Cost": 0.1, "Weight": 0.02}
    if "useEP" in settings and settings["useEP"].lower() == "true":
        if totalEPCount > 0:
            inv["Wallet"]["EP"] = {"Count": totalEPCount, "Cost": 0.2, "Weight": 0.02}
    if totalGPCount > 0:
        inv["Wallet"]["GP"] = {"Count": totalGPCount, "Cost": 1.0, "Weight": 0.02}
    if "usePP" in settings and settings["usePP"].lower() == "true":
        if totalPPCount > 0:
            inv["Wallet"]["PP"] = {"Count": totalPPCount, "Cost": 10.0, "Weight": 0.02}
    DESC = "Currency conversion completed\n"

    character().set_cvar("inventory", dump_json(inv))
    command = "list"


if command == "move":
    for eachBag in inv:
        bag = eachBag if eachBag.lower() == bag.lower() else bag
        newbag = eachBag if eachBag.lower() == newbag.lower() else newbag.capitalize()
    if bag == "" or newbag == "":
        INITIALHEADER = "Move requires -bag and -newbag be set\n"
        INITIALBODY = "Please try again."
    elif bag not in inv:
        INITIALHEADER = f"-bag ({bag})not found\n{ERROR}"
        INITIALBODY = "Please try again."
    else:
        if argArray[0].isdigit():
            count = float(argArray.pop(0))
        item = " ".join(argArray)
        itemLower = item.lower()
        PluralForm = item + "s"
        if sum(i.lower().startswith(item.lower()) for i in inv[bag].keys()) == 1: # If the provided command matches a unique
            item = [i for i in inv[bag].keys() if i.lower().startswith(item.lower())][0] # beginning use it ("ie: exch for exchangecurrency")
        elif sum(i.lower().startswith(item.lower()) for i in itemInfo.keys()) == 1: # If the provided command matches a unique
            item = [i for i in itemInfo.keys() if i.lower().startswith(item.lower())][0] # beginning use it ("ie: exch for exchangecurrency")
        for definedItem in [k for k in itemInfo]: # Check for pluralized item names
            tmpPluralForm = PluralForm
            if definedItem in itemInfo:
                if "PluralForm" in itemInfo[definedItem]:            # If PluralForm defined in item info use that.
                    tmpPluralForm = itemInfo[definedItem].PluralForm # IE: Staff -> Staves
                else:
                    tmpPluralForm = f"{definedItem}s"
            if itemLower == tmpPluralForm.lower():
                item = definedItem
                PluralForm = tmpPluralForm
                break
            elif itemLower == definedItem.lower():
                item = definedItem
                PluralForm = tmpPluralForm
                break
        if sum(i.lower().startswith(item.lower()) for i in itemInfo.keys()) == 1: # If the provided command matches a unique
            item = [i for i in itemInfo.keys() if i.lower().startswith(item.lower())][0] # beginning use it ("ie: exch for exchangecurrency")
        if item not in inv[bag]:  # If a copy of the item exists in inventory modify the count.
            ERROR = f"{bag} does not contain {item}\n{ERROR}"
        elif float(count) < 1.0:
            ERROR = f"Cannot move a negative number ({count})\n{ERROR}"
        elif float(inv[bag][item]["Count"]) < float(count):
            ERROR = f"{bag} has {inv[bag][item]['Count']} {PluralForm if float(inv[bag][item]['Count']) > 1.0 else item}, cannot move {count}\n{ERROR}"
        else:
            if newbag not in inv:
                inv[newbag] = {}
            if item in inv[newbag]:
                inv[newbag][item]["Count"] = float(inv[newbag][item]["Count"]) + count
                inv[bag][item]["Count"] = float(inv[bag][item]["Count"]) - count
            else:
                inv[newbag][item] = {"Count": count, "Cost": inv[bag][item]["Cost"], "Weight": inv[bag][item]["Weight"]}
                inv[bag][item]["Count"] = float(inv[bag][item]["Count"]) - count
            command = "list"
            if float(inv[bag][item]["Count"]) < 1.0:
                inv[bag].pop(item)
    character().set_cvar("inventory", dump_json(inv))
    bag = f"{bag}&&{newbag}"
    command = "list"


if command == "search":
    item = " ".join(argArray)
    itemLower = item.lower()
    matches = []
    if bag == "":
        for eachBag in inv:
            matches = matches + [{"Name": i, "Count": inv[eachBag][i]["Count"], "Bag": eachBag} for i in inv[eachBag].keys() if item.lower() in i.lower()]
    else:
        matches = [i for i in inv[bag].keys() if i.lower().contains(item.lower())]
    total = 0
    INITIALBODY = ''
    for eachItem in matches:
        total = total + int(eachItem["Count"])
        INITIALBODY = f"{INITIALBODY}\n{int(eachItem['Count'])} {eachItem['Name'] if int(eachItem['Count']) == 1 else PluralForm} in {eachItem['Bag']}"
    INITIALHEADER = f"Found {total} matches for {item}"

if command == "export":
    INITIALHEADER = "Save this and use: !import <text> to reset"
    INITIALBODY = f'`{inventory}`'


if command == "import":
    importString = " ".join(argArray)
    inv=load_json(importString)
    for eachBag in inv:
        for item in inv[eachBag]:
            if item in itemInfo:
                if "Cost" in itemInfo[item]:
                    inv[eachBag][item]["Cost"] = itemInfo[item].Cost
                if "Weight" in itemInfo[item]:
                    inv[eachBag][item]["Weight"] = itemInfo[item].Weight
            else:
                inv[eachBag][item]["Cost"] = -1.0
                inv[eachBag][item]["Weight"] = -1.0
    character().set_cvar("inventory", dump_json(inv))
    command = "list"


if command == "purge":
    if settings.disablePurge == "true":
        DESC = "Attempted to purge, but \"disablePurge\" set to true in inventorySettings svar\n"
    else:
        character().set_cvar("inventory", '{"Wallet": {}, "Carried": {}}')
        DESC = "ALL ITEMS PURGED (sure hope that wasn't a mistake)\nPrevious inventory just in case\n"
        command = "list"


if command == "shop":
    searchTerm = " ".join(argArray)
    searchTermLower = searchTerm.lower()
    matchingItems = []
    for definedItem in itemInfo.keys():
        tmpPluralForm = definedItem + "s"
        if definedItem in itemInfo:
            if "PluralForm" in itemInfo[definedItem]:
                tmpPluralForm = itemInfo[definedItem].PluralForm
        if searchTermLower in tmpPluralForm.lower():
            matchingItems.append(definedItem)
        elif searchTermLower in definedItem.lower():
            matchingItems.append(definedItem)
    if len(matchingItems) < 1:
        INITIALHEADER = "No matching items found."
        INITIALBODY = "Please try again."
    for match in matchingItems:
        itemCost = -1
        itemWeight = -1
        PluralForm = match + "s"
        if match in itemInfo:
            if "Cost" in itemInfo[match]:
                itemCost = itemInfo[match].Cost
            if "Weight" in itemInfo[match]:
                itemWeight = itemInfo[match].Weight
            if "PluralForm" in itemInfo[match]:
                PluralForm = itemInfo[match].PluralForm
        itemCostStr = "n/a" if int(itemCost) < 0 else str(itemCost) + " gp"
        itemWeightStr = str(itemWeight) + " lbs" if itemWeight > 0 else "Negligible"
        INITIALHEADER = f"Matching item{'s' if len(matchingItems) > 1 else ''}:"
        INITIALBODY = f"{INITIALBODY}{match}: {itemCostStr} | {itemWeightStr}\n"


msgs = []
if command == "help":
    TITLE = "Documentation"
    DESC = "Does this disappear before you finish reading? add -keep"
    CmdHeader = "!inv commands:"
    CmdBody = "**list**: List current inventory (default command)\n"\
              "**add [count] <item>**: Adds number of items (defaults to 1)\n"\
              "**+[count] <item>**: Adds number of items (defaults to 1)\n"\
              "**remove [count] <item>**: Removes given number of items (defaults to 1)\n"\
              "**-[count] <item>**: Removes given number of items (defaults to 1)\n"\
              "**buy [count] <item>**: Buys number of items from available funds (defaults to 1)\n"\
              "**move -bag <from bag> -newbag <to bag> [count] <item>**: Buys number of items from available funds (defaults to 1)\n"\
              "**search <text>**: Search inventory for items matching text\n"\
              "**shop <text>**: Search all item list for items matching text\n"\
              "**exchangecurrency**: Exchange currency. (ie: 110cp becomes 1gp, 1sp)\n"\
              "**export**: Prints string that can be used to import inventory exactly\n"\
              "**import <export string>**: Imports string from export command. Will **replace ALL** existing inventory\n"\
              "**purge**: Purge ALL inventory (irreversible)."\
              "**help|?**: This help text\n"
    OptionsHeader = "Some optional flags"
    OptionsBody = "**-bag <bag name>** | This will make the command you are using operate on the given container.\n"\
                  "**-keep** | This flag will make the message stay. Default is to remove it after 10 seconds\n"\
                  "**-count** | This flag will make the message stay. Default is to remove it after 10 seconds\n"\
                  "**-cost** | Override the cost of an item\n"\
                  "**-weight** | Override the weight of an item\n"
    SettingsHeader = "Settings for \"inventorySettings\" svar"
    SettingsBody = "Optional settings that can be defined in svar \"inventorySettings\" and their defaults are:\n"\
                   "**additionalGVARs**: ([]) Load GVAR lists in ascending order. IE: [1] overwrites the same item in [0]\n"\
                   "**disablePurge**: (false) Will disable use of \"purge\" command\n"\
                   "**itemInfoGVAR**: (66f684d2-42d5-4b0e-8231-c0d6c52b672d) Use given GVAR as list of item info. See default for format\n"\
                   "**useEP**: (false) Use EP when exchanging or buying\n"\
                   "**usePP**: (false) Use PP when exchanging or buying\n"
    ExampleHeader = "Settings for \"inventorySettings\" svar"
    ExampleBody = "Provided below are some examples:\n"\
                  "**!inv add 3 daggers** | This will add 3 daggers to \"Carried\"\n"\
                  "**!inv +3 daggers** | This will add 3 daggers to \"Carried\"\n"\
                  "**!inv add 3 daggers -bag belt** | This will add 3 daggers to \"Belt\"\n"\
                  "**!inv remove 3 daggers** | This will remove 3 daggers from \"Belt\"\n"\
                  "**!inv move 3 daggers -bag carried -newbag belt** | This will move 3 daggers from \"Carried\" to \"Belt\"\n"\
                  "**!inv buy 3 daggers -bag wielded** | This will buy 3 daggers from funds carried in \"Wallet\" and place in \"Wielded\"\n"\
                  "**!inv search daggers** | This will search for how many daggers you have\n"
    msgs.append(f"{timeout} -title \"{TITLE}\" -desc \"{ERROR}{DESC}\" -f \"{CmdHeader}|{CmdBody}\" -f \"{OptionsHeader}|{OptionsBody}\" -f \"{SettingsHeader}|{SettingsBody}\" -f \"{ExampleHeader}|{ExampleBody}\"")
              

if INITIALBODY != "" and INITIALHEADER != "":
    msgs.append(f"{timeout} -title \"{TITLE}\" -desc \"{ERROR}{DESC}\" -f \"{INITIALHEADER}|{INITIALBODY}\"")
    ERROR=""
    DESC=""


if command == "list": # Listed last as other commands will do work and then set to list
    TITLE = name + "'s Inventory"
    coinCount = 0
    coinValue = 0
    coinWeight = 0
    if "PP" in inv["Wallet"]:
        coinCount = float(inv["Wallet"]["PP"]["Count"])
        coinValue = float(inv["Wallet"]["PP"]["Count"]) * 10
    if "GP" in inv["Wallet"]:
        coinCount = coinCount + float(inv["Wallet"]["GP"]["Count"])
        coinValue = coinValue + float(inv["Wallet"]["GP"]["Count"]) 
    if "EP" in inv["Wallet"]:
        coinCount = coinCount + float(inv["Wallet"]["EP"]["Count"])
        coinValue = coinValue + float(inv["Wallet"]["EP"]["Count"]) * 0.5
    if "SP" in inv["Wallet"]:
        coinCount = coinCount + float(inv["Wallet"]["SP"]["Count"])
        coinValue = coinValue + float(inv["Wallet"]["SP"]["Count"]) * 0.1
    if "CP" in inv["Wallet"]:
        coinCount = coinCount + float(inv["Wallet"]["CP"]["Count"])
        coinValue = coinValue + float(inv["Wallet"]["CP"]["Count"]) * 0.01
    if coinCount > 0:
        coinWeight = coinCount * 0.02
    totalWeight = 0.0
    totalValue = 0.0
    msgNum = 0
    if DESC == "":
        DESC = "Current inventory:"
    msgs.append(f"{timeout} -title \"{TITLE}\" -desc \"{ERROR}{DESC}\"")
    wantList = inv.keys()
    if bag != "":
        wantList = bag.split('&&')
    bagList = []
    for wantBag in wantList:
        found=0
        for haveBag in inv:
            if haveBag.lower() == wantBag.lower():
                bagList.append(haveBag)
                found=1
        if found == 0:
            msgs[msgNum] = msgs[msgNum] + f" -f \"ERROR|Bag ({wantBag}) not found\""
    if len(bagList) < 1:
        msgs[msgNum] = msgs[msgNum] + f" -f \"ERROR|No matching bags found to list\""
    else:
        for eachBag in bagList:
            if len(inv[eachBag]) < 1:
                msgs[msgNum] = msgs[msgNum] + f" -f \"{eachBag}|*EMPTY*\""
            else:
                containerWeight = 0.0
                containerValue = 0.0
                for item in inv[eachBag]:
                    if float(inv[eachBag][item]["Cost"]) > 0:
                        containerValue += float(inv[eachBag][item]["Cost"]) * float(inv[eachBag][item]["Count"])
                    if float(inv[eachBag][item]["Weight"]) > 0:
                        containerWeight += float(inv[eachBag][item]["Weight"]) * float(inv[eachBag][item]["Count"])
                containerHeader = f" -f \"{eachBag} ({containerWeight:.2f} lbs.) [{containerValue:.2f} gp]:|"
                containerBody = ""
                itemList = []
                for item in inv[eachBag]:
                    itemList.append(item)
                itemList.sort()
                for item in itemList:
                    PluralForm = item + "s"
                    if item in itemInfo and "PluralForm" in itemInfo[item]:
                        PluralForm = itemInfo[item].PluralForm
                    itemCount = f"{int(float(inv[eachBag][item]['Count']))}x " + (PluralForm if float(inv[eachBag][item]["Count"]) > 1.0 else item) + " "
                    itemWeight = ("(" + str(inv[eachBag][item]["Weight"]) + (" lbs. | " + str(float(inv[eachBag][item]["Count"]) * float(inv[eachBag][item]["Weight"])) if float(inv[eachBag][item]["Count"]) > 1 else "") + " lbs.) ") if float(inv[eachBag][item]["Weight"]) > 0 else "(Negligible) "
                    itemValue = ("[" + str(inv[eachBag][item]["Cost"]) + (" gp | " + str(float(inv[eachBag][item]["Count"]) * float(inv[eachBag][item]["Cost"])) if float(inv[eachBag][item]["Count"]) > 1 else "") + " gp] ") if float(inv[eachBag][item]["Cost"]) > 0 else "[N/A]"
                    if eachBag == "Wallet":
                        itemWeight = ""
                        itemValue = ""
                    itemMsg = itemCount + itemWeight + itemValue + "\n"
                    if len(containerBody) + len(itemMsg) > 900:
                        msgs[msgNum] = msgs[msgNum] + containerHeader + containerBody + "\""
                        containerBody = itemMsg
                        containerHeader = f" -f \"{eachBag} continued:|"
#                    if len(msgs[msgNum]) + len(containerHeader) + len(containerBody) + len(itemMsg) > 5000:
#                        msgs[msgNum] = msgs[msgNum] + containerHeader + containerBody + "\""
#                        msgNum = msgNum + 1
#                        msgs.append(f"-title \"{TITLE}\" -desc \"Continued...\"")
#                        containerBody = itemMsg
                    else:
                        containerBody = containerBody + itemMsg
                msgs[msgNum] = msgs[msgNum] + containerHeader + containerBody + "\""
                totalWeight = totalWeight + containerWeight
                totalValue = totalValue + containerValue
    msgs[msgNum] = f"{msgs[msgNum]} -f \"Totals:|Total weight carried: {totalWeight:.2f}\nNet worth: {totalValue:.2f}\""


#queueRange = range(40)
#for num in queueRange:
#    if exists(f"inventoryMsgQueue{num}"):
#        delete_uvar(f"inventoryMsgQueue{num}")
#        queueRange.remove(num)
#output=[]
#for i in range(len(msgs)):
#    num = queueRange.pop(0)
#    set_uvar(f"inventoryMsgQueue{num}", msgs[i])
#    output.append("{{get(\"inventoryMsgQueue" + num + "\")}}")
#!tembed {{"\n!tembed ".join(output)}}
</drac2>
-thumb https://media-waterdeep.cursecdn.com/avatars/thumbnails/7/239/315/315/636284737702530626.jpeg {{msgs[0]}}
